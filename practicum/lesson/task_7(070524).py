"""
Задача:
Взять произвольный список и найти в списке отрицательное число, 
как только нашли закончить выполнение через break
"""
nums = [1, 2, 5, 8, 6, -7, 2, 0, 5]

for num in nums:
    if num < 0:
        print(num, 'отрицательное число найдено')
        break
else:
    print('Отрицательное число отсутствует')

"""
Задача:
Вывести все числа из диапазона от 1 до 10 кроме 5 и 6 используя continue
"""
for i in range(1, 11):
    if i == 5 or i == 6:
        continue
    print(i)




"""
Задача: создать список пар(кортежи) из элементов двух списков
"""

list_1 = ['a','b','c']
list_2 = [1,2,3]
zip_list = list(zip(list_1,list_2))
print(zip_list)


"""
Задача:
Допустим есть 2 списка, представляющих собой оценки студентов по 
тестированию и программированию. Нам нужно определить кто из 
студентов получил оценку выше 80 по обоим предметам.
for + zip()
"""

test_scores = [75,90,85,60,95]
prog_scores = [80,70,90,85,75]

for test_scores, prog_scores in zip(test_scores, prog_scores):
    if test_scores > 80 and prog_scores > 80:
        print(test_scores, prog_scores)


"""
"""
num = 1

while num <=10:

    if  num == 5 or num == 6:
        num +=1
        continue
    print(num)
    num +=1



    
"""
Напишите программу которая будет запрашивать у пользователя число, а затем 
выводить сумму чисел от 1 до n где n это число что записал пользователь
"""
n = int(input("Число введи: "))
total = 0
#цикл for
for i in range(1,n+1):
    total+=i
print(total)

#цикл while
i = 1
while i <=n:
    total += i
    i +=1
print(total)


"""
Напишите программу которая будет запрашивать у пользователя число, а затем
проверять есть ли он в списке.
"""

n = int(input("Число введи: "))
list_n = [5,10,12,31,33]
#цикл for
found = False
for num in list_n:
    if num == n:
        found= True
        break
if found:
    print(n)
else:
    print('не найдено')


#цикл while
found = False
i = 0
while i <len(list_n):
    if list_n[i] == n:
        found = True
        break
    i+=1
if found:
    print(n)
else:
    print('не найдено')


"""
Проверка работы резервного копирования веб-приложения
Предположим у вас есть веб-приложение, которое делает копии регулярно, 
ваша задача написать мини-тест который будет проверять, что резервные копии 
создаются регулярно.
Шаги:
1. Задать переменные для отслеживания количества созданных резервных копий и 
определения максимально допустимого числа копий.(2 переменные)
2. Запустить цикл while
3. Внутри цикла проверить создается ли новая копия вызвав соответствующий метод
4. Для каждой копии проверить что она успешно создается и доступна для 
восстановления
5. Если количество превышает лимит максимального, выйти из цикла
6. Проверить что количество созданных копий соответствует ожидаемому количеству
"""

count = 0
count_max = 10

while count < (count_max):
    print('Создание копии', count+1)
    count+=1
    print('Копия создана', count, 'успешно')
    if count > count_max:
        break
    #print(count)
